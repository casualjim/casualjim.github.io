<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploring technology one step at a time </title>
    <link>http://localhost:1313/categories/scala-json-json4s/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2015</rights>
    <updated>2012-10-25 08:48:23 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Json4s: One AST to rule them all.</title>
          <link>http://localhost:1313/blog/2012/10/25/json4s-one-ast-to-rule-them-all./</link>
          <pubDate>Thu, 25 Oct 2012 08:48:23 UTC</pubDate>
          <author></author>
          <guid>http://localhost:1313/blog/2012/10/25/json4s-one-ast-to-rule-them-all./</guid>
          <description>&lt;p&gt;It seems to me that every webframework in Scala, of which we have plenty, also insists on writing their own JSON library.
But various tools rely on the AST from lift-json.  This is both good and bad, there were a number of gaps in the lift-json version.
The most notable being that it does not support any other type than Double for representing decimal numbers.
A second problem is that because of the large number of dependencies in the lift project it typically is a bottleneck for upgrading to scala-2.10.
And thirdly it just seems an odd place for a nice library like that to live.
I&amp;rsquo;m hopeful that more libraries like Play, Spray etc will contribute to this project so that instead of a fragmented json landscape we get a homogeneous one. All of them have a json ast with the same types defined in it.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve set out to set lift-json free from the lift project and tried to add some improvements along the way.
The first improvement I&amp;rsquo;ve made is that you now have the choice between using &lt;code&gt;BigDecimal&lt;/code&gt; or &lt;code&gt;Double&lt;/code&gt; for representing decimal numbers, so you can use the library also to represent invoices etc.
The second change I made is to add several backends for parsing. The original lift-json parser is still available in the native package but you can now also use jackson as a parsing backend to the json library.
It&amp;rsquo;s really easy to add more backends so smarterjson, spray-json etc are all in the cards.&lt;/p&gt;

&lt;p&gt;I took a look at what play2 has in their json support and it looks like their main thing is a type class based reader/writer story instead of the formats based one from lift-json, so for good measure I also added that system to this library. In general I like typeclasses for this type of stuff but in this case I actually think that lift-json has a nicer approach by assembling all the context into a single formats object instead of requiring many type classes to be in scope at any given time when you want to parse or write json.&lt;/p&gt;

&lt;p&gt;There are a few more convenience methods added on the &lt;code&gt;JValue&lt;/code&gt; type that allow you to &lt;code&gt;camelize&lt;/code&gt; or &lt;code&gt;underscore&lt;/code&gt; keys, remove the nulls etc.
I spoke with &lt;a href=&#34;https://github.com/jonifreeman&#34;&gt;Joni Freeman&lt;/a&gt; about the general idea of this library and he showed me what he did on a branch for lift-json 3.0 so I incorporated his work into json4s too. it basically means that a key/value pair used to represent a &lt;code&gt;JObject&lt;/code&gt; is no longer a valid json AST node and there are some extra methods to work with those fields. All of this is explained in the &lt;a href=&#34;https://github.com/json4s/json4s/blob/master/README.md&#34;&gt;README&lt;/a&gt; of the json4s project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also added support for json4s to the &lt;a href=&#34;https://github.com/dispatch/reboot&#34;&gt;dispatch reboot&lt;/a&gt; project so you can use it there just like you can with lift-json. Furthermore &lt;a href=&#34;https://github.com/rktoomey&#34;&gt;Rose Toomey&lt;/a&gt; let me know that &lt;a href=&#34;https://github.com/novus/salat&#34;&gt;salat&lt;/a&gt; is now using json4s as json library instead of lift-json.&lt;/p&gt;

&lt;p&gt;Some of the improvements I still want to make is for scala 2.10 I want to use the &lt;code&gt;Mirror&lt;/code&gt; api to be able to reflect over more stuff than just case classes. For some of the use cases we have at where I work it makes sense to be able to use a few annotations (yes annotations unfortunately) to have certain keys be ignored and so on.  I&amp;rsquo;ll probably steal some of that from the Salat project so that there is still some degree of consistency between our libraries.&lt;/p&gt;

&lt;p&gt;I also want to figure out how we can possibly make the AST based approach useful with huge data structures, as it&amp;rsquo;s not inconceivable to want to send 100MB or 10GB json docs over the wire. At that moment a lazy approach actually makes a lot of sense, I&amp;rsquo;m open to suggestions on how this could be achieved efficiently without breaking the AST model.&lt;/p&gt;

&lt;p&gt;So if you&amp;rsquo;re using json in scala consider using or contributing to the &lt;a href=&#34;https://github.com/json4s/json4s&#34;&gt;json4s project&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
